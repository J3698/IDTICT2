package contest.winter2017;

import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Iterator;
import java.util.Scanner;
import java.time.LocalDateTime;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;


/**
 * Entry-point class for the black-box testing framework 
 * 
 * @author IDT
 */
public class Main {
	
	/**
	 * cli key for path to the executable black-box jar to test
	 */
	public static final String JAR_TO_TEST_PATH = "jarToTestPath";
	
	/**
	 * cli key for path to the directory to be used to store output generated by 
	 * jacoco framework
	 */
	public static final String JACOCO_OUTPUT_PATH = "jacocoOutputPath";
	
	/**
	 * cli key for path to the jacoco agent jar used to instrument the executable
	 * black-box jar in order to collect code coverage metrics
	 */
	public static final String JACOCO_AGENT_JAR_PATH = "jacocoAgentJarPath";

	/**
	 * cli key for number of black box iterations to run
	 */
	public static final String BLACK_BOX_TESTS = "bbTests";

	/**
	 * cli key for target time in minutes for tester to run
	 */
	public static final String TIME_GOAL = "timeGoal";

	/**
	 * cli key for whether to only use toolchain output
	 */
	public static final String TOOL_CHAIN = "toolChain";

	/**
	 * cli key for showing information about a permission
	 */
	public static final String PERMISSION_INFO = "permissionInfo";

	/**
	 * cli key for application help
	 */
	public static final String HELP = "help";
	
	/**
	 * alternative cli key for application help
	 */
	public static final String ALT_HELP = "h";
	
	/**
	 * Entry-point method for the black-box testing framework 
	 * 
	 * @param args - String array of command line arguments
	 */
	public static void main(String[] args) {
		
		CommandLineParser parser = new DefaultParser();
		
		Options options = new Options();
		// necessary parameters with arguments
		options.addOption(JAR_TO_TEST_PATH, true, "path to the executable jar to test");
		options.addOption(JACOCO_OUTPUT_PATH, true, "path to directory for jacoco output");
		options.addOption(JACOCO_AGENT_JAR_PATH, true, "path to the jacoco agent jar");
		// optional parameters with arguments
		options.addOption(PERMISSION_INFO, true, "permission to get information about");
		options.addOption(BLACK_BOX_TESTS, true, "number of black box testings to run");
		options.addOption(TIME_GOAL, true, "time goal for black box testings to run in");
		// optional parameters without arguments
		options.addOption(TOOL_CHAIN, false, "option to print only necessary output");
		options.addOption(HELP, false, "help");
		options.addOption(ALT_HELP, false, "help");

		try {
			CommandLine cliArgs = parser.parse(options, args);
			if (cliArgs != null){
				
				// if we have the three arguments we need for exploratory black-box testing, initialize and execute the tester.  
				if (cliArgs.hasOption(JAR_TO_TEST_PATH) && cliArgs.hasOption(JACOCO_OUTPUT_PATH) && cliArgs.hasOption(JACOCO_AGENT_JAR_PATH)) {

					ExceptionLogger.init(cliArgs);

					String jarToTestPath = cliArgs.getOptionValue(JAR_TO_TEST_PATH);
					String jacocoOutputDirPath = cliArgs.getOptionValue(JACOCO_OUTPUT_PATH);
					String jacocoAgentJarPath = cliArgs.getOptionValue(JACOCO_AGENT_JAR_PATH);
					String permissionToShow = cliArgs.getOptionValue(PERMISSION_INFO);
					String bbTests = cliArgs.getOptionValue(BLACK_BOX_TESTS);
					String timeGoal = cliArgs.getOptionValue(TIME_GOAL);
					String toolChain = "" + cliArgs.hasOption(TOOL_CHAIN);
					
					// catch and report runtime exceptions
					try {
						// the Tester class contains all of the logic for the testing framework
						Tester tester = new Tester();
						tester.init(jarToTestPath, jacocoOutputDirPath, jacocoAgentJarPath, bbTests, timeGoal, toolChain);
						// implemented by IDT
						tester.executeBasicTests();
						// implemented by ICT-2
						tester.executeSecurityTests();
						// output
						System.out.println(tester.getYAMLOutput());
					} catch (RuntimeException re) {
						re.printStackTrace();
						if (!toolChain.equals("true")) {
							ExceptionLogger.errorLogDialog(re, LocalDateTime.now());
						}
						System.exit(0);
					}
					
				// if the user has requested help
				} else if (cliArgs.hasOption(HELP) || cliArgs.hasOption(ALT_HELP)) {
					
					printHelp(options);
					
			    // user did not request help and we had an inadequate number of arguments
				} else if (cliArgs.hasOption(PERMISSION_INFO)) {

					String info = cliArgs.getOptionValue(PERMISSION_INFO);
					System.out.println(PermissionInfo.getInfo(info));

				} else {
					
					System.out.println("ERROR: Failed to execute - application requires at least three parameters.");
					printHelp(options);
					
				}
			}
			
		} catch( ParseException exp ) {
		    System.out.println( "ERROR: An error occurred during command line parsing: " + exp.getMessage());
		}
	}
	
	


	/**
	 * private static method used to print the application help
	 */
	private static void printHelp(Options options) {
		 String header = "\n";
		 String footer = "\nFor additional information about the testing framework, please see the documentation provided by IDT.";
		 
		 HelpFormatter formatter = new HelpFormatter();
		 formatter.printHelp("com.idtus.contest.winter2017.framework", header, options, footer, true);
	}
}
