package contest.winter2017;

import java.time.LocalDateTime;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

import contest.winter2017.gui.GUIMain;
import javafx.application.Application;

/**
 * Entry-point class for the black-box testing framework.
 * <p>
 * This application has five basic modes of operation, testing mode, help mode,
 * permission info mode, permission list mode, and GUI mode. If the arguments
 * for one of those modes is given, the modes further down the list are ignored.
 * <p>
 * The first operation mode is testing mode. In this mode required arguments are
 * the path to the executable jar, the path to the directory for jacoco output,
 * and the path to the jacoco agent jar.
 * <p>
 * The second mode of operation is help mode. In this mode help is supplied to
 * the user.
 * <p>
 * The third mode of operation is permission info mode. This mode supplies the
 * security risks associated with various java permissions to the user.
 * <p>
 * The fourth mode of operation is permission list mode. This mode lists the
 * different sorts of permissions.
 * <p>
 * The fifth mode of operation is GUI mode. In this mode, a JavaFX application
 * is run, which exposes much of the functionality in other modes.
 * 
 * @author IDT
 */
public class Main {

	/**
	 * Command line key for path to the executable black-box jar to test.
	 */
	public static final String JAR_TO_TEST_PATH = "jarToTestPath";

	/**
	 * Command line key for path to the directory to be used to store output
	 * generated by the jacoco framework.
	 */
	public static final String JACOCO_OUTPUT_PATH = "jacocoOutputPath";

	/**
	 * Command line key for path to the jacoco agent jar used to instrument the
	 * executable black-box jar in order to collect code coverage metrics.
	 */
	public static final String JACOCO_AGENT_JAR_PATH = "jacocoAgentJarPath";

	/**
	 * Command line key for number of black box iterations to run.
	 */
	public static final String BLACK_BOX_TESTS = "bbTests";

	/**
	 * Command line key for target time in minutes for tester to run.
	 */
	public static final String TIME_GOAL = "timeGoal";

	/**
	 * Command line key for whether to only use tool chain output.
	 */
	public static final String TOOL_CHAIN = "toolChain";

	/**
	 * Command line key for showing information about a permission.
	 */
	public static final String PERMISSION_INFO = "permissionInfo";

	/**
	 * Command line key for listing the different permissions.
	 */
	public static final String PERMISSION_LIST = "permissionList";

	/**
	 * Command line key for application help.
	 */
	public static final String HELP = "help";

	/**
	 * Alternative command line key for application help.
	 */
	public static final String ALT_HELP = "h";

	/**
	 * Command line key for running the GUI.
	 */
	public static final String GUI = "gui";

	/**
	 * Starts the black-box testing framework with the given arguments.
	 * 
	 * @param args
	 *            - string array of command line arguments
	 */
	public static void main(String[] args) {

		CommandLineParser parser = new DefaultParser();

		Options options = new Options();
		// necessary parameters with arguments
		options.addOption(JAR_TO_TEST_PATH, true, "path to the executable jar to test");
		options.addOption(JACOCO_OUTPUT_PATH, true, "path to directory for jacoco output");
		options.addOption(JACOCO_AGENT_JAR_PATH, true, "path to the jacoco agent jar");
		// optional parameters with arguments
		options.addOption(PERMISSION_INFO, true, "permission to get information about");
		options.addOption(BLACK_BOX_TESTS, true, "number of black box testings to run");
		options.addOption(TIME_GOAL, true, "time goal for black box testings to run in");
		// optional parameters without arguments
		options.addOption(TOOL_CHAIN, false, "option to print only necessary output");
		options.addOption(PERMISSION_LIST, false, "print a list of different permissions");
		options.addOption(HELP, false, "help");
		options.addOption(ALT_HELP, false, "help");
		options.addOption(GUI, false, "run the gui");

		try {
			CommandLine cliArgs = parser.parse(options, args);
			if (cliArgs != null) {

				// if we have the three arguments we need for exploratory
				// black-box testing, initialize and execute the tester.
				if (cliArgs.hasOption(JAR_TO_TEST_PATH) && cliArgs.hasOption(JACOCO_OUTPUT_PATH)
						&& cliArgs.hasOption(JACOCO_AGENT_JAR_PATH)) {

					ExceptionLogger.init(cliArgs);

					String jarToTestPath = cliArgs.getOptionValue(JAR_TO_TEST_PATH);
					String jacocoOutputDirPath = cliArgs.getOptionValue(JACOCO_OUTPUT_PATH);
					String jacocoAgentJarPath = cliArgs.getOptionValue(JACOCO_AGENT_JAR_PATH);
					String bbTests = cliArgs.getOptionValue(BLACK_BOX_TESTS);
					String timeGoal = cliArgs.getOptionValue(TIME_GOAL);
					boolean quiet = cliArgs.hasOption(TOOL_CHAIN);
					// don't report permissions if tool chain used
					boolean watchdog = !quiet;

					// catch and report runtime exceptions
					try {

						// the Tester class contains all of the logic for the
						// testing framework
						Tester tester = new Tester();
						boolean init = tester.init(null, jarToTestPath, jacocoOutputDirPath, jacocoAgentJarPath,
								bbTests, timeGoal, "", quiet, watchdog);
						if (init) {
							// implemented by IDT
							tester.executeBasicTests();
							// implemented by ICT-2
							tester.executeSecurityTests();
							// output
							System.out.println(tester.getYAMLOutput());
						} else {
							System.exit(0);
						}
					} catch (RuntimeException re) {
						re.printStackTrace();
						if (!quiet) {
							ExceptionLogger.errorLogDialog(re, LocalDateTime.now());
						}
						System.exit(0);
					}

					// if the user has requested help
				} else if (cliArgs.hasOption(HELP) || cliArgs.hasOption(ALT_HELP)) {

					printHelp(options);

					// user requested permission information
				} else if (cliArgs.hasOption(PERMISSION_INFO)) {

					@SuppressWarnings("resource")
					Scanner sc = new Scanner(System.in);
					String next;
					while (!(next = sc.nextLine()).equals("exit")) {
						String info = next;

						System.out.println("Allowances:");
						System.out.println(PermissionInfo.getAllowance(next));

						System.out.println("Risks:");
						System.out.println(PermissionInfo.getRisk(next));

						System.out.println("-----------");
						System.out.println(PermissionInfo.COPYRIGHT_NOTICE);
					}

					// user requested a list of permission names
				} else if (cliArgs.hasOption(PERMISSION_LIST)) {

					for (String name : PermissionInfo.getPermissionNames()) {
						System.out.println(name);
					}

					// user requested the GUI
				} else if (cliArgs.hasOption(GUI)) {

					Application.launch(GUIMain.class);

					// user did not enter valid parameters
				} else {

					System.out.println("ERROR: Failed to execute - application requires at least three parameters.");
					printHelp(options);

				}
			}

		} catch (ParseException exp) {
			System.out.println("ERROR: An error occurred during command line parsing: " + exp.getMessage());
			printHelp(options);
		}
	}

	/**
	 * Prints the application's help information.
	 * 
	 * @param options
	 *            - options to show during help
	 */
	private static void printHelp(Options options) {
		String header = "\n";
		String footer = "\nFor additional information about the testing framework, please see the documentation provided by IDT.";

		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("com.idtus.contest.winter2017.framework", header, options, footer, true);
	}
}
