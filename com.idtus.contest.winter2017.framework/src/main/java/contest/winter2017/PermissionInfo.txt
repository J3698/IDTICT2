--NEXT--
createAccessControlContext
What it Allows:
Creation of an AccessControlContext
Potential Risks:
This allows someone to instantiate an AccessControlContext with a DomainCombiner. Extreme care must be taken when granting this permission. Malicious code could create a DomainCombiner that augments the set of permissions granted to code, and even grant the code AllPermission.
--NEXT--
getDomainCombiner
What it Allows:
Retrieval of an AccessControlContext's DomainCombiner
Potential Risks:
This allows someone to query the policy via the getPermissions call, which discloses which permissions would be granted to a given CodeSource. While revealing the policy does not compromise the security of the system, it does provide malicious code with additional  information which it may use to better aim an attack. It is wise not to divulge more information than necessary.
--NEXT--
getPolicy
What it Allows:
Retrieval of the system-wide security policy (specifically, of the currently-installed Policy object)
Potential Risks:
This allows someone to query the policy via the getPermissions call, which discloses which permissions would be granted to a given CodeSource. While revealing the policy does not compromise the security of the system, it does provide malicious code with additional information which it may use to better aim an attack. It is wise not to divulge more information than necessary.
--NEXT--
setPolicy
What it Allows:
Setting of the system-wide security policy (specifically, the Policy object)
Potential Risks:
Granting this permission is extremely dangerous, as malicious code may grant itself all the necessary permissions it needs to successfully mount an attack on the system.
--NEXT--
createPolicy.{policy type}
What it Allows:
Getting an instance of a Policy via Policy.getInstance
Potential Risks:
Granting this permission enables code to obtain a Policy object. Malicious code may query the Policy object to determine what permissions have been granted to code other than itself.
--NEXT--
getProperty.{key}
What it Allows:
Retrieval of the security property with the specified key
Potential Risks:
Depending on the particular key for which access has been granted, the code may have access to the list of security providers, as well as the location of the system-wide and user security policies. while revealing this information does not compromise the security of the system, it does provide malicious code with additional information which it may use to better aim an attack.
--NEXT--
setProperty.{key}
What it Allows:
Setting of the security property with the specified key
Potential Risks:
This could include setting a security provider or defining the location of the system-wide security policy. Malicious code that has permission to set a new security provider may set a rogue provider that steals confidential information such as cryptographic private keys. In addition, malicious code with permission to set the location of the system-wide security policy may point it to a security policy that grants the attacker all the necessary permissions it requires to successfully mount an attack on the system.
--NEXT--
insertProvider.{provider name}
What it Allows:
Addition of a new provider, with the specified name
Potential Risks:
This would allow somebody to introduce a possibly malicious provider (e.g., one that discloses the private keys passed to it) as the highest-priority provider. This would be possible because the Security object (which manages the installed providers) currently does not check the integrity or authenticity of a provider before attaching it.
--NEXT--
removeProvider.{provider name}
What it Allows:
Removal of the specified provider
Potential Risks:
This may change the behavior or disable execution of other parts of the program. If a provider subsequently requested by the program has been removed, execution may fail. Also, if the removed provider is not explicitly requested by the rest of the program, but it would normally be the provider chosen when a cryptography service is requested (due to its previous order in the list of providers), a different provider will be chosen instead, or no suitable provider will be found, thereby resulting in program failure.
--NEXT--
clearProviderProperties.{provider name}
What it Allows:
"Clearing" of a Provider so that it no longer contains the properties used to look up services implemented by the provider
Potential Risks:
This disables the lookup of services implemented by the provider. This may thus change the behavior or disable execution of other parts of the program that would normally utilize the Provider, as described under the "removeProvider.{provider name}" permission.
--NEXT--
putProviderProperty.{provider name}
What it Allows:
Setting of properties for the specified Provider
Potential Risks:
The provider properties each specify the name and location of a particular service implemented by the provider. By granting this permission, you let code replace the service specification with another one, thereby specifying a different implementation.
--NEXT--
removeProviderProperty.{provider name}
What it Allows:
Removal of properties from the specified Provider
Potential Risks:
This disables the lookup of services implemented by the provider. They are no longer accessible due to removal of the properties specifying their names and locations. This may change the behavior or disable execution of other parts of the program that would normally utilize the Provider, as described under the "removeProvider.{provider name}" permission.
--NEXT--
setSystemScope
What it Allows:
Setting of the system identity scope
Potential Risks:
This would allow an attacker to configure the system identity scope with certificates that should not be trusted, thereby granting applet or application code signed with those certificates privileges that would have been denied by the system's original identity
scope.
--NEXT--
setIdentityPublicKey
What it Allows:
Setting of the public key for an Identity
Potential Risks:
If the identity is marked as "trusted", this allows an attacker to introduce a different public key (e.g., its own) that is not trusted by the system's identity scope, thereby granting applet or application code signed with that public key privileges that would have been denied otherwise.
--NEXT--
setIdentityInfo
What it Allows:
Setting of a general information string for an Identity
Potential Risks:
This allows attackers to set the general description for an identity. This may trick applications into using a different identity than sintended or may prevent applications from finding a particular identity.
--NEXT--
addIdentityCertificate
What it Allows:
Addition of a certificate for an Identity
Potential Risks:
This allows attackers to set a certificate for an identity's public key. This is dangerous because it affects the trust relationship across the system. This public key suddenly becomes trusted to a wider audience than it otherwise would be.
--NEXT--
removeIdentityCertificate
What it Allows:
Removal of a certificate for an Identity
Potential Risks:
This allows attackers to remove a certificate for an identity's public key. This is dangerous because it affects the trust relationship across the system. This public key suddenly becomes considered less trustworthy than it otherwise would be.
--NEXT--
printIdentity
What it Allows:
Viewing the name of a principal and optionally the scope in which it is used, and whether or not it is considered "trusted" in that scope.
Potential Risks:
The scope that is printed out may be a filename, in which case it may convey local system information. For example, here's a sample printout of an identity named "carol", who is marked not trusted in the user's identity database: carol[/home/luehe/identitydb.obj][not trusted]
--NEXT--
setSignerKeyPair
What it Allows:
Setting of the key pair (public key and private key) for a Signer
Potential Risks:
This would allow an attacker to replace somebody else's (the "target's") keypair with a possibly weaker keypair (e.g., a keypair of a smaller keysize). This also would allow the attacker to listen in on encrypted communication between the target and its peers. The target's peers might wrap an encryption session key under the target's "new" public key, which would allow the attacker (who possesses the corresponding private key) to unwrap the session key and decipher the communication data encrypted under that session key.
--NEXT--
accessClipboard
What it Allows:
Posting and retrieval of information to and from the AWT clipboard
Potential Risks:
This would allow malfeasant code to share potentially sensitive or confidential information.
--NEXT--
accessEventQueue
What it Allows:
Access to the AWT event queue
Potential Risks:
After retrieving the AWT event queue, malicious code may peek at and even remove existing events from the system, as well as post bogus events which may purposefully cause the application or applet to misbehave in an insecure manner.
--NEXT--
accessSystemTray
What it Allows:
Access to the AWT SystemTray instance
Potential Risks:
This would allow malicious code to add tray icons to the system tray. First, such an icon may look like the icon of some known application (such as a firewall or anti-virus) and order a user to do something unsafe (with help of balloon messages). Second, the system tray may be glutted with tray icons so that no one could add a tray icon anymore.
--NEXT--
createRobot
What it Allows:
Create java.awt.Robot objects
Potential Risks:
The java.awt.Robot object allows code to generate native-level mouse and keyboard events as well as read the screen. It could allow malicious code to control the system, run other programs, read the display, and deny mouse and keyboard access to the user.
--NEXT--
fullScreenExclusive
What it Allows:
Enter full-screen exclusive mode
Potential Risks:
Entering full-screen exclusive mode allows direct access to low-level graphics card memory. This could be used to spoof the system, since the program is in direct control of rendering.
--NEXT--
listenToAllAWTEvents
What it Allows:
Listen to all AWT events, system-wide
Potential Risks:
After adding an AWT event listener, malicious code may scan all AWT events dispatched in the system, allowing it to read all user input (such as passwords). Each AWT event listener is called from within the context of that event queue'sEventDispatchThread, so if the accessEventQueue permission is also enabled, malicious code could modify the contents of AWT event queues system-wide, causing the application or applet to misbehave in an insecure manner.
--NEXT--
readDisplayPixels
What it Allows:
Readback of pixels from the display screen
Potential Risks:
Interfaces such as the java.awt.Composite interface which allow arbitrary code to examine pixels on the display enable malicious code to snoop on the activities of the user.
--NEXT--
replaceKeyboardFocusManager
What it Allows:
Sets the KeyboardFocusManager for a particular thread.
Potential Risks:
When a SecurityManager is installed, the invoking thread must be granted this permission in order to replace the current KeyboardFocusManager. If permission is not granted, a SecurityException will be thrown.
--NEXT--
setAppletStub
What it Allows:
Setting the stub which implements Applet container services
Potential Risks:
Malicious code could set an applet's stub and result in unexpected behavior or denial of service to an applet.
--NEXT--
setWindowsAlwaysOnTop
What it Allows:
Setting always-on-top property of the window:Window.setAlwaysOnTop(boolean)
Potential Risks:
The malicious window might make itself look and behave like a real full desktop, so that information entered by the unsuspecting user is captured and subsequently misused.
--NEXT--
showWindowWithoutWarningBanner
What it Allows:
Display of a window without also displaying a banner warning that the window was created by an applet
Potential Risks:
Without this warning, an applet may pop up windows without the user knowing that they belong to an applet. Since users may make security-sensitive decisions based on whether or not the window belongs to an applet (entering a username and password into a dialog box, for example), disabling this warning banner may allow applets to trick the user into entering such information.
--NEXT--
toolkitModality
What it Allows:
Creating TOOLKIT_MODAL dialogs and setting the TOOLKIT_EXCLUDE window property.
Potential Risks:
When a toolkit-modal dialog is shown from an applet, it blocks all other applets in the browser. When launching applications from Java Web Start, its windows (such as the security dialog) may also be blocked by toolkit-modal dialogs, shown from these applications.
--NEXT--
watchMousePointer
What it Allows:
Getting the information about the mouse pointer position at any time
Potential Risks:
Constantly watching the mouse pointer, an applet can make guesses about what the user is doing, i.e. moving the mouse to the lower left corner of the screen most likely means that the user is about to launch an application. If a virtual keypad is used so that keyboard is emulated using the mouse, an applet may guess what is being typed.
--NEXT--
enableSubclassImplementation
What it Allows:
Implementing a subclass of ObjectOutputStream orObjectInputStream to override the default serialization or deserialization, respectively, of objects
Potential Risks:
Code can use this to serialize or deserialize classes in a purposefully malfeasant manner. For example, during serialization, malicious code can use this to purposefully store confidential private field data in a way easily accessible to attackers. Or, during deserializaiton it could, for example, deserialize a class with all its private fields zeroed out.
--NEXT--
enableSubstitution
What it Allows:
Substitution of one object for another during serialization or deserialization
Potential Risks:
This is dangerous because malicious code can replace the actual object with one which has incorrect or malignant data.
--NEXT--
suppressAccessChecks
What it Allows:
Warning: Extreme caution should be taken before granting this permission to code, for it provides the ability to access fields and invoke methods in a class. This includes not only public, but protected and private fields and methods as well.
Potential Risks:
This is dangerous in that information (possibly confidential) and methods normally unavailable would be accessible to malicious
code.
--NEXT--
createClassLoader
What it Allows:
Creation of a class loader
Potential Risks:
This is an extremely dangerous permission to grant. Malicious applications that can instantiate their own class loaders could then load their own rogue classes into the system. These newly loaded classes could be placed into any protection domain by the class loader, thereby automatically granting the classes the permissions for that domain.
--NEXT--
getClassLoader
What it Allows:
Retrieval of a class loader (e.g., the class loader for the calling class)
Potential Risks:
This would grant an attacker permission to get the class loader for a particular class. This is dangerous because having access to a class's class loader allows the attacker to load other classes available to that class loader. The attacker would typically otherwise not have access to those classes.
--NEXT--
setContextClassLoader
What it Allows:
Setting of the context class loader used by a thread
Potential Risks:
The context class loader is used by system code and extensions when they need to lookup resources that might not exist in the system class loader. Granting setContextClassLoader permission would allow code to change which context class loader is used for a particular thread, including system threads.
--NEXT--
enableContextClassLoaderOverride
What it Allows:
Subclass implementation of the thread context class loader methods
Potential Risks:
The context class loader is used by system code and extensions when they need to lookup resources that might not exist in the system class loader. Granting enableContextClassLoaderOverride permission would allow a subclass of Thread to override the methods that are used to get or set the context class loader for a particular thread.
--NEXT--
setSecurityManager
What it Allows:
Setting of the security manager (possibly replacing an existing one)
Potential Risks:
The security manager is a class that allows applications to implement a security policy. Granting the setSecurityManager permission would allow code to change which security manager is used by installing a different, possibly less restrictive security manager, thereby bypassing checks that would have been enforced by the original security manager.
--NEXT--
getenv.{variable name}
What it Allows:
Reading of the value of the specified environment variable
Potential Risks:
This would allow code to read the value, or determine the existence, of a particular environment variable. This is dangerous if the variable contains confidential data.
--NEXT--
exitVM.{exit status}
What it Allows:
Halting of the Java Virtual Machine with the specified exit status
Potential Risks:
This allows an attacker to mount a denial-of-service attack by automatically forcing the virtual machine to halt. Note: The "exitVM.*" permission is automatically granted to all code loaded from the application class path, thus enabling applications to terminate themselves. Also, the "exitVM" permission is equivalent to "exitVM.*".
--NEXT--
shutdownHooks
What it Allows:
Registration and cancellation of virtual-machine shutdown hooks
Potential Risks:
This allows an attacker to register a malicious shutdown hook that interferes with the clean shutdown of the virtual machine.
--NEXT--
setFactory
What it Allows:
Setting of the socket factory used by ServerSocket or Socket, or of the stream handler factory used by URL
Potential Risks:
This allows code to set the actual implementation for the socket, server socket, stream handler, or RMI socket factory. An attacker may set a faulty implementation which mangles the data stream.
--NEXT--
setIO
What it Allows:
Setting of System.out, System.in, and System.err
Potential Risks:
This allows changing the value of the standard system streams. An attacker may change System.in to monitor and steal user input, or may set System.err to a "null" OutputSteam, which would hide any error messages sent to System.err.
--NEXT--
modifyThread
What it Allows:
Modification of threads, e.g., via calls to Thread interrupt, stop, suspend, resume, setDaemon,setPriority, setName andsetUncaughtExceptionHandler methods
Potential Risks:
This allows an attacker to modify the behavior of any thread in the system.
--NEXT--
stopThread
What it Allows:
Stopping of threads via calls to the Thread stop method
Potential Risks:
This allows code to stop any thread in the system provided that it is already granted permission to access that thread. This poses as a threat, because that code may corrupt the system by killing existing threads.
--NEXT--
modifyThreadGroup
What it Allows:
Modification of thread groups, e.g., via calls to ThreadGroup destroy, getParent, resume, setDaemon, setMaxPriority, stop, and suspend methods
Potential Risks:
This allows an attacker to create thread groups and set their run priority.
--NEXT--
getProtectionDomain
What it Allows:
Retrieval of the ProtectionDomain for a class
Potential Risks:
This allows code to obtain policy information for a particular code source. While obtaining policy information does not compromise the security of the system, it does give attackers additional information, such as local file names for example, to better aim an attack.
--NEXT--
getFileSystemAttributes
What it Allows:
Retrieval of file system attributes
Potential Risks:
This allows code to obtain file system information such as disk usage or disk space available to the caller. This is potentially dangerous because it discloses information about the system hardware configuration and some information about the caller's privilege to write files.
--NEXT--
readFileDescriptor
What it Allows:
Reading of file descriptors
Potential Risks:
This would allow code to read the particular file associated with the file descriptor read. This is dangerous if the file contains confidential data.
--NEXT--
writeFileDescriptor
What it Allows:
Writing to file descriptors
Potential Risks:
This allows code to write to a particular file associated with the descriptor. This is dangerous because it may allow malicous code to plant viruses or at the very least, fill up your entire disk.
--NEXT--
loadLibrary.{library name}
What it Allows:
Dynamic linking of the specified library
Potential Risks:
It is dangerous to allow an applet permission to load native code libraries, because the Java security architecture is not designed to and does not prevent malicious behavior at the level of native code.
--NEXT--
accessClassInPackage.
{package name}
What it Allows:
Access to the specified package via a class loader's loadClass method when that class loader calls the SecurityManager checkPackageAcesss method
Potential Risks:
This gives code access to classes in packages to which it normally does not have access. Malicious code may use these classes to help in its attempt to compromise security in the system.
--NEXT--
defineClassInPackage.
{package name}
What it Allows:
Definition of classes in the specified package, via a class loader's defineClass method when that class loader calls the SecurityManager checkPackageDefinitionmethod.
Potential Risks:
This grants code permission to define a class in a particular package. This is dangerous because malicious code with this permission may define rogue classes in trusted packages like java.security or java.lang, for example.
--NEXT--
accessDeclaredMembers
What it Allows:
Warning: Extreme caution should be taken before granting this permission to code, for it provides access to the declared members of a class.
Potential Risks:
This grants code permission to query a class for its public, protected, default (package) access, and private fields and/or methods. Although the code would have access to the private and protected field and method names, it would not have access to the private/protected field data and would not be able to invoke any private methods. Nevertheless, malicious code may use this information to better aim an attack. Additionally, it may invoke any public methods and/or access public fields in the class. This could be dangerous if the code would normally not be able to invoke those methods and/or access the fields because it can't cast the object to the class/interface with those methods and fields.
--NEXT--
queuePrintJob
What it Allows:
Initiation of a print job request
Potential Risks:
This could print sensitive information to a printer, or simply waste paper.
--NEXT--
getStackTrace
What it Allows:
Retrieval of the stack trace information of another thread.
Potential Risks:
This allows retrieval of the stack trace information of another thread. This might allow malicious code to monitor the execution of threads and discover vulnerabilities in applications.
--NEXT--
setDefaultUncaughtExceptionHandler
What it Allows:
Setting the default handler to be used when a thread terminates abruptly due to an uncaught exception.
Potential Risks:
This allows an attacker to register a malicious uncaught exception handler that could interfere with termination of a thread.
--NEXT--
preferences
What it Allows:
Represents the permission required to get access to the java.util.prefs.Preferences implementations user or system root which in turn allows retrieval or update operations within the Preferences persistent backing store.
Potential Risks:
This permission allows the user to read from or write to the preferences backing store if the user running the code has sufficient OS privileges to read/write to that backing store. The actual backing store may reside within a traditional filesystem directory or within a registry depending on the platform OS.
--NEXT--
setDefaultAuthenticator
What it Allows:
The ability to set the way authentication information is retrieved when a proxy or HTTP server asks for authentication
Potential Risks:
Malicious code can set an authenticator that monitors and steals user authentication input as it retrieves the input from the user.
--NEXT--
requestPasswordAuthentication
What it Allows:
The ability to ask the authenticator registered with the system for a password
Potential Risks:
Malicious code may steal this password.
--NEXT--
specifyStreamHandler
What it Allows:
The ability to specify a stream handler when constructing a URL
Potential Risks:
Malicious code may create a URL with resources that it would normally not have access to (like file:/foo/fum/), specifying a stream handler that gets the actual bytes from someplace it does have access to. Thus it might be able to trick the system into creating a ProtectionDomain/CodeSource for a class even though that class really didn't come from that location.
--NEXT--
setProxySelector
What it Allows:
The ability to set the proxy selector used to make decisions on which proxies to use when making network connections.
Potential Risks:
Malicious code can set a ProxySelector that directs network traffic to an arbitrary network host.
--NEXT--
getProxySelector
What it Allows:
The ability to get the proxy selector used to make decisions on which proxies to use when making network connections.
Potential Risks:
Malicious code can get a ProxySelector to discover proxy hosts and ports on internal networks, which could then become targets for attack.
--NEXT--
setCookieHandler
What it Allows:
The ability to set the cookie handler that processes highly security sensitive cookie information for an Http session.
Potential Risks:
Malicious code can set a cookie handler to obtain access to highly security sensitive cookie information. Some web servers use cookies to save user private information such as access control information, or to track user browsing habit.
--NEXT--
getCookieHandler
What it Allows:
The ability to get the cookie handler that processes highly security sensitive cookie information for an Http session.
Potential Risks:
Malicious code can get a cookie handler to obtain access to highly security sensitive cookie information. Some web servers use cookies to save user private information such as access control information, or to track user browsing habit.
--NEXT--
setResponseCache
What it Allows:
The ability to set the response cache that provides access to a local response cache.
Potential Risks:
Malicious code getting access to the local response cache could access security sensitive information, or create false entries in the response cache.
--NEXT--
getResponseCache
What it Allows:
The ability to get the response cache that provides access to a local response cache.
Potential Risks:
Malicious code getting access to the local response cache could access security sensitive information.
--NEXT--
setLog
What it Allows:
Setting of the logging stream
Potential Risks:
This is a dangerous permission to grant. The contents of the log can contain usernames and passwords, SQL statements, and SQL data.
--NEXT--
callAbort
What it Allows:
Invocation of the Connection methodabort
Potential Risks:
Permits an application to terminate a physical connection to a database.
--NEXT--
setSyncFactory
What it Allows:
Invocation of the SyncFactorymethods setJNDIContext and setLogger
Potential Risks:
Permits an application to specify the JNDI context from which the SyncProvider implementations can be retrieved from and the logging object to be used by the SyncProvider implementation.
--NEXT--
setNetworkTimeout
What it Allows:
Invocation of the Connection methodsetNetworkTimeout
Potential Risks:
Permits an application to specify the maximum period a Connection or objects created from theConnection object will wait for the database to reply to any one request.
--NEXT--
setHostnameVerifier
What it Allows:
The ability to set a callback which can decide whether to allow a mismatch between the host being connected to by an HttpsURLConnection and the common name field in server certificate.
Potential Risks:
Malicious code can set a verifier that monitors host names visited by HttpsURLConnection requests or that allows server certificates with invalid common names.
--NEXT--
getSSLSessionContext
What it Allows:
The ability to get the SSLSessionContext of anSSLSession.
Potential Risks:
Malicious code may monitor sessions which have been established with SSL peers or might invalidate sessions to slow down performance.
--NEXT--
setDefaultSSLContext
What it Allows:
he ability to set the default SSL context.
Potential Risks:
When applications use default SSLContext, by setting the default SSL context, malicious code may use unproved trust material, key material and random generator, or use dangerous SSL socket factory and SSL server socket factory.
--NEXT--
doAs
What it Allows:
Invocation of the Subject.doAs methods
Potential Risks:
This enables an application to invoke code (Actions) under the identity of any Subjectspecified to the doAs method.
--NEXT--
doAsPrivileged
What it Allows:
Invocation of the Subject.doAsPrivilegedmethods
Potential Risks:
This enables an application to invoke code (Actions) under the identity of any Subjectspecified to the doAsPrivileged method. Additionally, the caller may remove itself from the call stack (and hence from subsequent security decisions) if it passes null as theAccessControlContext.
--NEXT--
getSubject
What it Allows:
Retrieving the Subjectfrom the providedAccessControlContext
Potential Risks:
This permits an application to gain access to an authenticated Subject. The application can then access the Subject's authenticated Principals and public credentials.
--NEXT--
getSubjectFromDomainCombiner
What it Allows:
Retrieving the Subjectfrom aSubjectDomainCombiner
Potential Risks:
This permits an application to gain access to the authenticated Subject associated with aSubjectDomainCombiner. The application can then access the Subject's authenticated Principals and public credentials.
--NEXT--
setReadOnly
What it Allows:
Setting a Subject read-only
Potential Risks:
This permits an application to set a Subject's Principal, public credential and private credential sets to be read-only. This can be potentially used as a type of denial of service attack.
--NEXT--
modifyPrincipals
What it Allows:
Make modifications to a Subject's Principal set
Potential Risks:
Access control decisions are based on the Principals associated with a Subject. This permission permits an application to make any modifications to a Subject's Principal set, thereby affecting subsequent security decisions.
--NEXT--
modifyPublicCredentials
What it Allows:
Make modifications to a Subject's public credential set
Potential Risks:
This permission permits an application to add or remove public credentials from a Subject. This may affect code that relies on the proper set of private credentials to exist in that Subject.
--NEXT--
modifyPrivateCredentials
What it Allows:
Make modifications to a Subject's private credential set
Potential Risks:
This permission permits an application to add or remove private credentials from a Subject. This may affect code that relies on the proper set of private credentials to exist in that Subject.
--NEXT--
refreshCredential
What it Allows:
Refresh a credential Object that implements theRefreshable interface
Potential Risks:
This permission permits an application to refresh a credential that is intended to expire.
--NEXT--
destroyCredential
What it Allows:
Destroy a credential Objectthat implements theDestroyable interface
Potential Risks:
This permission permits an application to potentially destroy a credential as a denial of service attack.
--NEXT--
createLoginContext.{name}
What it Allows:
Instantiate a LoginContextwith the specified name
Potential Risks:
For security purposes, an administrator might not want an application to be able to authenticate to any LoginModule. This permission permits an application to authenticate to the LoginModules configured for the specified name.
--NEXT--
getLoginConfiguration
What it Allows:
Retrieve the system-wide login Configuration
Potential Risks:
Allows an application to determine all the LoginModules that are configured for every application in the system.
--NEXT--
setLoginConfiguration
What it Allows:
Set the system-wide login Configuration
Potential Risks:
Allows an application to configure the LoginModules for every application in the system.
--NEXT--
createLoginConfiguration.{configuration type}
What it Allows:
Obtain a Configuration object via Configuration.getInstance
Potential Risks:
Allows an application to see all the LoginModules that are specified in the configuration.
--NEXT--
refreshLoginConfiguration
What it Allows:
Refresh the system-wide login Configuration
Potential Risks:
Allows an application to refresh the login Configuration.
--NEXT--
play
What it Allows:
Audio playback through the audio device or devices on the system. Allows the application to obtain and manipulate lines and mixers for audio playback (rendering).
Potential Risks:
In some cases use of this permission may affect other applications because the audio from one line may be mixed with other audio being played on the system, or because manipulation of a mixer affects the audio for all lines using that mixer.
--NEXT--
record
What it Allows:
Audio recording through the audio device or devices on the system. Allows the application to obtain and manipulate lines and mixers for audio recording (capture).
Potential Risks:
In some cases use of this permission may affect other applications because manipulation of a mixer affects the audio for all lines using that mixer. This permission can enable an applet or application to eavesdrop on a user.
